// <auto-generated />
using System;
using DataModels.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataModels.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataModels.Models.Domain.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostalCodeId")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.HasIndex("PostalCodeId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("DataModels.Models.Domain.Genre", b =>
                {
                    b.Property<int>("GenreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreID"));

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreID");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("DataModels.Models.Domain.Hall", b =>
                {
                    b.Property<int>("HallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HallId"));

                    b.Property<int>("SeatColumn")
                        .HasColumnType("int");

                    b.Property<int>("SeatRow")
                        .HasColumnType("int");

                    b.Property<int?>("ShowtimesId")
                        .HasColumnType("int");

                    b.Property<int>("TheaterId")
                        .HasColumnType("int");

                    b.HasKey("HallId");

                    b.HasIndex("ShowtimesId");

                    b.HasIndex("TheaterId");

                    b.ToTable("Hall");
                });

            modelBuilder.Entity("DataModels.Models.Domain.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"));

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)");

                    b.Property<DateOnly>("Release")
                        .HasColumnType("date");

                    b.Property<int>("ShowtimesId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("DataModels.Models.Domain.PostalCode", b =>
                {
                    b.Property<int>("PostalCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostalCodeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostalCodeId");

                    b.ToTable("PostalCodes");
                });

            modelBuilder.Entity("DataModels.Models.Domain.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatId"));

                    b.Property<int>("RowNumber")
                        .HasColumnType("int");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int");

                    b.HasKey("SeatId");

                    b.ToTable("Seat");
                });

            modelBuilder.Entity("DataModels.Models.Domain.Showtimes", b =>
                {
                    b.Property<int>("ShowtimesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShowtimesId"));

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ShowtimeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TheaterId")
                        .HasColumnType("int");

                    b.HasKey("ShowtimesId");

                    b.HasIndex("MovieId");

                    b.ToTable("Showtimes");
                });

            modelBuilder.Entity("DataModels.Models.Domain.Theater", b =>
                {
                    b.Property<int>("TheaterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TheaterId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TheaterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TheaterId");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Theaters");
                });

            modelBuilder.Entity("DataModels.Models.Domain.Tickets", b =>
                {
                    b.Property<int>("TicketsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketsId"));

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<int>("ShowtimesId")
                        .HasColumnType("int");

                    b.HasKey("TicketsId");

                    b.HasIndex("SeatId");

                    b.HasIndex("ShowtimesId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("DataModels.Models.Domain.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostalCodeId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketsId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("PostalCodeId");

                    b.HasIndex("TicketsId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<int>("GenresGenreID")
                        .HasColumnType("int");

                    b.Property<int>("MoviesMovieId")
                        .HasColumnType("int");

                    b.HasKey("GenresGenreID", "MoviesMovieId");

                    b.HasIndex("MoviesMovieId");

                    b.ToTable("GenreMovie");
                });

            modelBuilder.Entity("HallSeat", b =>
                {
                    b.Property<int>("HallsHallId")
                        .HasColumnType("int");

                    b.Property<int>("SeatsSeatId")
                        .HasColumnType("int");

                    b.HasKey("HallsHallId", "SeatsSeatId");

                    b.HasIndex("SeatsSeatId");

                    b.ToTable("HallSeat");
                });

            modelBuilder.Entity("DataModels.Models.Domain.Address", b =>
                {
                    b.HasOne("DataModels.Models.Domain.PostalCode", null)
                        .WithMany("Addresses")
                        .HasForeignKey("PostalCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.Models.Domain.Hall", b =>
                {
                    b.HasOne("DataModels.Models.Domain.Showtimes", null)
                        .WithMany("Halls")
                        .HasForeignKey("ShowtimesId");

                    b.HasOne("DataModels.Models.Domain.Theater", "Theater")
                        .WithMany("Halls")
                        .HasForeignKey("TheaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theater");
                });

            modelBuilder.Entity("DataModels.Models.Domain.Showtimes", b =>
                {
                    b.HasOne("DataModels.Models.Domain.Movie", "Movie")
                        .WithMany("Showtimes")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("DataModels.Models.Domain.Theater", b =>
                {
                    b.HasOne("DataModels.Models.Domain.Address", "Address")
                        .WithOne("Theater")
                        .HasForeignKey("DataModels.Models.Domain.Theater", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("DataModels.Models.Domain.Tickets", b =>
                {
                    b.HasOne("DataModels.Models.Domain.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModels.Models.Domain.Showtimes", "showtimes")
                        .WithMany("Tickets")
                        .HasForeignKey("ShowtimesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seat");

                    b.Navigation("showtimes");
                });

            modelBuilder.Entity("DataModels.Models.Domain.User", b =>
                {
                    b.HasOne("DataModels.Models.Domain.PostalCode", "PostalCode")
                        .WithMany("Users")
                        .HasForeignKey("PostalCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModels.Models.Domain.Tickets", null)
                        .WithMany("Users")
                        .HasForeignKey("TicketsId");

                    b.Navigation("PostalCode");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("DataModels.Models.Domain.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresGenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModels.Models.Domain.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HallSeat", b =>
                {
                    b.HasOne("DataModels.Models.Domain.Hall", null)
                        .WithMany()
                        .HasForeignKey("HallsHallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModels.Models.Domain.Seat", null)
                        .WithMany()
                        .HasForeignKey("SeatsSeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.Models.Domain.Address", b =>
                {
                    b.Navigation("Theater");
                });

            modelBuilder.Entity("DataModels.Models.Domain.Movie", b =>
                {
                    b.Navigation("Showtimes");
                });

            modelBuilder.Entity("DataModels.Models.Domain.PostalCode", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataModels.Models.Domain.Showtimes", b =>
                {
                    b.Navigation("Halls");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("DataModels.Models.Domain.Theater", b =>
                {
                    b.Navigation("Halls");
                });

            modelBuilder.Entity("DataModels.Models.Domain.Tickets", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
